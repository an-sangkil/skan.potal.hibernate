package com.knkcorp.tms.mobile.web.controller;import javax.servlet.http.HttpServletRequest;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.ModelMap;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import com.knkcorp.auth.utils.SessionUtils;import com.knkcorp.tms.mobile.common.code.CommonCode;import com.knkcorp.tms.mobile.common.code.ConcertCode;import com.knkcorp.tms.mobile.web.model.CommonObject;import com.knkcorp.tms.mobile.web.model.ResponseMessage;import com.knkcorp.tms.web.jpa.dto.ConcertHallManagement;import com.knkcorp.tms.web.jpa.dto.ConcertManagement;import com.knkcorp.tms.web.jpa.dto.QReservationInformation;import com.knkcorp.tms.web.jpa.repository.ConcertHallManagementJpaRepository;import com.knkcorp.tms.web.jpa.repository.ConcertManagementJpaRepository;import com.querydsl.core.Tuple;import com.querydsl.core.types.dsl.Expressions;import com.querydsl.jpa.JPAExpressions;import com.querydsl.jpa.impl.JPAQuery;/** *  * Description : 예매 하기 * @author skan * @since 2017. 6. 15. * @version * 			Copyright (C) 2017 by KNK Corp. All right reserved. */@Controller@RequestMapping("/reservation")public class ReservationController extends AbstractCommonController {	private final Logger logger = LoggerFactory.getLogger(this.getClass());		@Autowired ConcertManagementJpaRepository concertManagementJpaRepository; 	@Autowired ConcertHallManagementJpaRepository concertHallManagementJpaRepository; 			@RequestMapping("/reserveStep")	public String reserveStep(HttpServletRequest request,			@RequestParam(value="searchConcertName"  ,required=false)                   String searchConcertName, 			@RequestParam(required=false) String concertId,			ModelMap modelMap) throws Exception {				if(SessionUtils.getSessionUserEmail() == null) {			return "redirect:/login";		}						CommonObject<String> commonObject = new ResponseMessage<>();				try {			// 선택된 콘서트 			if(concertId != null){				ConcertManagement 	  concertManagement     = concertManagementJpaRepository.findOne(concertId);				ConcertHallManagement concertHallManagement = concertHallManagementJpaRepository.findOne(concertManagement.getConcertHallId());								if(concertManagement != null){					concertManagement.getConcertOrderSet().forEach(item -> {												// 회차별 판매된 티켓 총량						JPAQuery<?> jPAQuery = super.getJPAQueryInstance();						QReservationInformation qReservationInformation = QReservationInformation.reservationInformation;						Tuple tuple=  jPAQuery.select(								JPAExpressions									.select(qReservationInformation.count().as(Expressions.numberPath(Long.class, "buyedTicketCount")))										.from(qReservationInformation)									.where(qReservationInformation.concertTimeOrder.concertTimeOrderId.concertOrderId.eq(item.getConcertTimeOrderId().getConcertOrderId())									.and(qReservationInformation.concertManagement.concertId.eq(item.getConcertManagement().getConcertId()))									.and(qReservationInformation.seatStatus.ne(ConcertCode.SEAT_EMPTY.name()))								)								,qReservationInformation.count().as(Expressions.numberPath(Long.class, "totalCount"))						).from(qReservationInformation).where(qReservationInformation.concertTimeOrder.concertTimeOrderId.concertOrderId.eq(item.getConcertTimeOrderId().getConcertOrderId()).and(qReservationInformation.concertManagement.concertId.eq(item.getConcertManagement().getConcertId()))).fetchOne();										logger.trace("buyedTicketCount = {}" , tuple.get(0, Long.class) );						logger.trace("totalCount = {}"       , tuple.get(Expressions.numberPath(Long.class, "totalCount")));												item.setBuyedTicketCount(tuple.get(0, Long.class));						item.setTotalTicketCount(tuple.get(Expressions.numberPath(Long.class, "totalCount")));					});				}				modelMap.put("concertHallManagement", concertHallManagement);				modelMap.put("concertManagement", concertManagement);			}			commonObject.setStateCode(CommonCode.SUCCESS);			modelMap.put("searchConcertName", searchConcertName);					} catch (Exception e){			logger.error("예매화면 보여주기에 실패 = {}", e);			commonObject.setStateCode(CommonCode.FAIL);					}				return "reservation.reserveStep";	}	@RequestMapping("/reserveResult")	public String reserveResult(HttpServletRequest request, ModelMap modelMap) throws Exception {				return "reservation.reserveResult";	}}